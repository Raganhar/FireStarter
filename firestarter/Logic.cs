using System.Diagnostics;
using firestarter.GithubActionModels.Pullrequest;
using firestarter.GithubWorkflows;
using firestarter.OctoStuff;
using MoreLinq;
using Newtonsoft.Json;

namespace firestarter;

public class Logic
{
    private readonly ILogger _logger;
    private readonly ActionInputs _options;
    private readonly GithubActionContext_pullrequest _githubContext;
    private BranchComparer _branchComparer;
    private string _currentBranchName;
    public static string _solutionDescriptionPath = ".ap/solution.json";


    public Logic(ILogger logger, ActionInputs options)
    {
        _logger = logger;
        _options = options;
    }

    public async Task DoDaThing()
    {
        SetToRootFolder();
        var description = GetSolutionDescription();
        //create folders
        var githubWorkflows = GenerateFolders(description);
        //create files
        SetToRootFolder();
        CreateGithubFiles(description, githubWorkflows);

        //infra
        //projects
        SetToRootFolder();
        PrintEverything();
        PushStuffToGit();
    }

    private static string GenerateFolders(SolutionDescription? description)
    {
        var projectFolders = description.Projects.Select(x => x.Name)
            .SelectMany(x => new List<string> { $"{x}", $"{x}.tests" });
        var githubWorkflows = ".github/workflows";
        new[] { githubWorkflows, ".infra" }.Concat(projectFolders).ForEach(x => { Directory.CreateDirectory(x); });
        return githubWorkflows;
    }

    private void SetToRootFolder()
    {
        Directory.SetCurrentDirectory(_options.Directory);
    }

    private static void PushStuffToGit()
    {
        string gitCommand = "git";
        string gitAddArgument = @"add -A";
        string gitCommitArgument = @"commit -m ""Auto generated stuff""";
        string gitPushArgument = @"push origin autogenerated-pipeline-files";

        Process.Start(gitCommand, gitAddArgument);
        Process.Start(gitCommand, gitCommitArgument);
        Process.Start(gitCommand, gitPushArgument);
    }

    private void PrintEverything()
    {
        foreach (string file in Directory.EnumerateFiles(Directory.GetCurrentDirectory(), "*.*",
                     SearchOption.AllDirectories))
        {
            _logger.LogInformation(file);
            Console.WriteLine(file);
        }
    }

    private static SolutionDescription? GetSolutionDescription()
    {
        if (File.Exists(_solutionDescriptionPath))
        {
            return JsonConvert.DeserializeObject<SolutionDescription>(File.ReadAllText(_solutionDescriptionPath));
        }

        throw new ArgumentException($"unable to find solution description at {_solutionDescriptionPath}");
    }

    private void CreateGithubFiles(SolutionDescription solutionDescription, string githubWorkflows)
    {
        Directory.SetCurrentDirectory(Path.Combine(Directory.GetCurrentDirectory(), githubWorkflows));

        var projectNames = solutionDescription.Projects.Select(x => x.Name).ToList();

        var filename = $"{nameof(promote_dev)}.yml";
        File.WriteAllText(filename, promote_dev.content);

        filename = $"{nameof(promote_release)}.yml";
        File.WriteAllText(filename, promote_release.content);

        filename = $"{nameof(pull_request_for_hotfix)}.yml";
        File.WriteAllText(filename, pull_request_for_hotfix.content);

        filename = $"{nameof(release_dev)}.yml";
        File.WriteAllText(filename, release_dev.content(projectNames));

        filename = $"{nameof(release_predev)}.yml";
        File.WriteAllText(filename, release_predev.content(projectNames));

        filename = $"{nameof(release_preprod)}.yml";
        File.WriteAllText(filename, release_preprod.content(projectNames));

        filename = $"{nameof(release_prod)}.yml";
        File.WriteAllText(filename, release_prod.content(projectNames));

        filename = $"{nameof(release_qa)}.yml";
        File.WriteAllText(filename, release_qa.content(projectNames));

        filename = $"{nameof(release_reuse)}.yml";
        File.WriteAllText(filename, release_reuse.content);

        filename = $"{nameof(transition_jira_issues)}.yml";
        File.WriteAllText(filename, transition_jira_issues.content);
    }
}

public static class Utils
{
    public static string ToFileName(this string name)
    {
        return name.Replace("_", "-");
    }
}